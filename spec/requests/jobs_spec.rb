require "rails_helper"

RSpec.describe "Jobs", type: :request do
  describe "GET /index" do
    pending "add some examples (or delete) #{__FILE__}"
  end
end

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# RSpec.describe "/stories", type: :request do
#   # This should return the minimal set of attributes required to create a valid
#   # Story. As you add validations to Story, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) do
#     skip("Add a hash of attributes valid for your model")
#   end
#
#   let(:invalid_attributes) do
#     skip("Add a hash of attributes invalid for your model")
#   end
#
#   describe "GET /index" do
#     it "renders a successful response" do
#       Story.create! valid_attributes
#       get stories_url
#       expect(response).to be_successful
#     end
#   end
#
#   describe "GET /show" do
#     it "renders a successful response" do
#       story = Story.create! valid_attributes
#       get story_url(story)
#       expect(response).to be_successful
#     end
#   end
#
#   describe "GET /new" do
#     it "renders a successful response" do
#       get new_story_url
#       expect(response).to be_successful
#     end
#   end
#
#   describe "GET /edit" do
#     it "renders a successful response" do
#       story = Story.create! valid_attributes
#       get edit_story_url(story)
#       expect(response).to be_successful
#     end
#   end
#
#   describe "POST /create" do
#     context "with valid parameters" do
#       it "creates a new Story" do
#         expect do
#           post stories_url, params: { story: valid_attributes }
#         end.to change(Story, :count).by(1)
#       end
#
#       it "redirects to the created story" do
#         post stories_url, params: { story: valid_attributes }
#         expect(response).to redirect_to(story_url(Story.last))
#       end
#     end
#
#     context "with invalid parameters" do
#       it "does not create a new Story" do
#         expect do
#           post stories_url, params: { story: invalid_attributes }
#         end.to change(Story, :count).by(0)
#       end
#
#       it "renders a successful response (i.e. to display the 'new' template)" do
#         post stories_url, params: { story: invalid_attributes }
#         expect(response).to be_successful
#       end
#     end
#   end
#
#   describe "PATCH /update" do
#     context "with valid parameters" do
#       let(:new_attributes) do
#         skip("Add a hash of attributes valid for your model")
#       end
#
#       it "updates the requested story" do
#         story = Story.create! valid_attributes
#         patch story_url(story), params: { story: new_attributes }
#         story.reload
#         skip("Add assertions for updated state")
#       end
#
#       it "redirects to the story" do
#         story = Story.create! valid_attributes
#         patch story_url(story), params: { story: new_attributes }
#         story.reload
#         expect(response).to redirect_to(story_url(story))
#       end
#     end
#
#     context "with invalid parameters" do
#       it "renders a successful response (i.e. to display the 'edit' template)" do
#         story = Story.create! valid_attributes
#         patch story_url(story), params: { story: invalid_attributes }
#         expect(response).to be_successful
#       end
#     end
#   end
#
#   describe "DELETE /destroy" do
#     it "destroys the requested story" do
#       story = Story.create! valid_attributes
#       expect do
#         delete story_url(story)
#       end.to change(Story, :count).by(-1)
#     end
#
#     it "redirects to the stories list" do
#       story = Story.create! valid_attributes
#       delete story_url(story)
#       expect(response).to redirect_to(stories_url)
#     end
#   end
# end
